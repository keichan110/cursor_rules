---
description: 技術的問題の分析、解決策の設計、実装計画に関する包括的な問題解決方法論フレームワーク
globs: ["**/docs/working-memory/**/*", "**/*.md"]
---
# 問題解決方法論
# 技術的問題の分析、解決策の設計、実装計画に関する包括的なフレームワーク

<rule>
name: problem_solving_methodology
description: 技術的問題に対する体系的アプローチの問題解決方法論
filters:
  - type: file_extension
    pattern: "\\.md$"
  - type: content
    pattern: "(Problem Analysis|Solution Design|Implementation Plan)"
actions:
  - type: suggest
    message: |
      問題解決方法論フレームワーク:

      ## フェーズ 1: 問題分析

      ### 1.1 問題の特定
      - [ ] 問題の明確な定義
      - [ ] 症状vs根本原因の区別
      - [ ] 影響範囲の特定
      - [ ] 緊急度と重要度の評価

      ### 1.2 情報収集
      - [ ] 関連ログの収集
      - [ ] エラーメッセージの分析
      - [ ] 環境情報の記録
      - [ ] 再現手順の文書化

      ### 1.3 根本原因分析
      - [ ] "なぜ"を5回質問
      - [ ] 魚骨図の作成（該当する場合）
      - [ ] 仮説の立案
      - [ ] 仮説の検証

      ## フェーズ 2: 解決策設計

      ### 2.1 解決策の選択肢
      - [ ] 複数の解決策を検討
      - [ ] 短期vs長期の解決策
      - [ ] リスクと利益の評価
      - [ ] リソース要件の評価

      ### 2.2 解決策の評価基準
      - [ ] 技術的実現可能性
      - [ ] 実装複雑度
      - [ ] パフォーマンスへの影響
      - [ ] メンテナンス性
      - [ ] セキュリティ考慮事項

      ### 2.3 推奨解決策
      - [ ] 選択した解決策の説明
      - [ ] 選択理由の文書化
      - [ ] 想定されるリスクと軽減策
      - [ ] 成功基準の定義

      ## フェーズ 3: 実装計画

      ### 3.1 実装ステップ
      - [ ] 詳細な実装手順
      - [ ] タスクの依存関係
      - [ ] 推定時間
      - [ ] 必要なリソース

      ### 3.2 テスト戦略
      - [ ] 単体テスト計画
      - [ ] 統合テスト計画
      - [ ] ユーザー受入テスト
      - [ ] パフォーマンステスト

      ### 3.3 リスク管理
      - [ ] 潜在的リスクの特定
      - [ ] 軽減策の計画
      - [ ] 緊急時計画
      - [ ] ロールバック手順

      ## 問題タイプ別の専門化されたアプローチ

      ### API問題
      - [ ] エンドポイントの動作確認
      - [ ] リクエスト/レスポンス分析
      - [ ] 認証と承認の確認
      - [ ] レート制限の確認
      - [ ] 外部依存関係の確認

      ### UI問題
      - [ ] ブラウザ互換性の確認
      - [ ] CSS/JavaScript エラーの確認
      - [ ] レスポンシブデザインの確認
      - [ ] アクセシビリティの確認
      - [ ] ユーザーエクスペリエンスの評価

      ### パフォーマンス問題
      - [ ] ボトルネックの特定
      - [ ] データベースクエリの最適化
      - [ ] キャッシュ戦略の確認
      - [ ] アセット最適化
      - [ ] サーバーリソースの確認

      ### セキュリティ問題
      - [ ] 脆弱性の特定と評価
      - [ ] 攻撃ベクトルの分析
      - [ ] セキュリティ対策の実装
      - [ ] セキュリティテストの実施
      - [ ] コンプライアンス確認

      ## 文書化テンプレート

      ### 問題レポート
      ```markdown
      # 問題レポート: [問題名]
      
      ## 問題の概要
      [問題の簡潔な説明]
      
      ## 症状
      - [観察された症状1]
      - [観察された症状2]
      
      ## 環境情報
      - OS: [OS情報]
      - バージョン: [アプリケーションバージョン]
      - ブラウザ: [ブラウザ情報（該当する場合）]
      
      ## 再現手順
      1. [ステップ1]
      2. [ステップ2]
      3. [ステップ3]
      
      ## 期待される結果
      [期待される動作]
      
      ## 実際の結果
      [実際に発生した動作]
      
      ## 根本原因
      [根本原因の分析]
      
      ## 提案された解決策
      [解決策の詳細]
      
      ## 実装計画
      [実装の詳細手順]
      
      ## テスト計画
      [検証方法]
      
      ## リスクと軽減策
      [潜在的リスクと対策]
      ```

examples:
  - input: |
      "API レスポンスが遅い問題を解決する"
    output: |
      ## フェーズ 1: 問題分析
      - [x] 問題の特定: API レスポンス時間が 5 秒を超える
      - [x] 情報収集: パフォーマンスログを分析
      - [x] 根本原因分析: N+1 クエリ問題を発見
      
      ## フェーズ 2: 解決策設計
      - [x] 解決策の選択肢: イーガーローディング、キャッシュ、インデックス
      - [x] 推奨解決策: イーガーローディングの実装
      
      ## フェーズ 3: 実装計画
      - [ ] ActiveRecord includes() を使用してイーガーローディングを実装
      - [ ] パフォーマンステストを実施
      - [ ] 本番環境での監視設定

metadata:
  priority: high
  version: 1.2
  tags:
    - problem-solving
    - methodology
    - analysis
    - documentation
</rule>

---