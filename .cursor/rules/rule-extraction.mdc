---
description: .cursorrules からルールを抽出して管理するためのルール
globs: ["**/.cursorrules"]
---
# ルール抽出と管理
# このルールは .cursorrules ファイルからルールを特定し管理するのに役立ちます

<rule>
name: rule_extraction
description: .cursorrules ファイルからルールを抽出して管理します
filters:
  - type: file_extension
    pattern: "\\.cursorrules$"
  - type: content
    pattern: "## [0-9]+\\."
actions:
  - type: suggest
    message: |
      .cursorrules から抽出されたルール:

      1. プロジェクト構造ルール:
         - すべてのコンポーネントを app/components/ または app/components/ui/ に配置
         - Rails 8 の規則に従う
         - 複雑なロジックにはサービスオブジェクトを使用
         - コントローラーを RESTful で集中的に保つ

      2. ドキュメントルール:
         - ワーキングメモリを /docs/working-memory/ に保持
         - タスクには plan.md と updates.md を使用
         - すべてのコンポーネントを文書化
         - API ドキュメントを最新に保つ

      3. コード標準:
         - Ruby クラス構造テンプレートに従う
         - 適切なモデル組織を使用
         - コントローラー規則に従う
         - JSDoc で型を文書化

      4. Git プラクティス:
         - 慣例的なコミットを使用
         - コミットにスコープを含める
         - コミットをアトミックに保つ
         - ブランチ命名規則に従う

      5. タスク管理:
         - タスクテンプレートを使用
         - 現在のステータスを上部に保つ
         - 進行中には絵文字マーカーを使用
         - date コマンドでタイムスタンプを更新

      6. セキュリティルール:
         - OWASP ガイドラインに従う
         - 定期的なセキュリティ監査
         - 適切な認証
         - 安全なセッション管理

      7. パフォーマンスルール:
         - N+1 クエリを監視
         - イーガーローディングを使用
         - 適切なキャッシュを実装
         - 遅い操作をプロファイル

      8. テスト要件:
         - 包括的な RSpec カバレッジ
         - モデル/サービスの単体テスト
         - 統合テスト
         - フローのシステムテスト

      9. ログ標準:
         - 適切なログレベルを使用
         - 集中ログ
         - エラー追跡
         - パフォーマンス監視

      10. ファイル管理:
          - ディレクトリ構造に従う
          - 適切なファイル命名
          - 設定ファイルの組織
          - アセット管理

      11. API 標準:
          - RESTful API 設計
          - 適切なエラーハンドリング
          - API バージョニング
          - レスポンス形式の一貫性

      12. UI/UX 標準:
          - アクセシビリティガイドライン
          - レスポンシブデザイン
          - 一貫性のあるスタイリング
          - ユーザビリティのベストプラクティス

examples:
  - input: |
      "新しいコンポーネントを作成する"
    output: |
      適用されるルール:
      - プロジェクト構造: app/components/ui/ に配置
      - ドキュメント: コンポーネントの文書化
      - コード標準: Ruby クラス構造テンプレートに従う
      - Git: 慣例的なコミットメッセージ
      - テスト: 包括的な RSpec カバレッジ

  - input: |
      "API エンドポイントを更新する"
    output: |
      適用されるルール:
      - API 標準: RESTful 設計とエラーハンドリング
      - セキュリティ: OWASP ガイドライン
      - パフォーマンス: N+1 クエリ監視
      - ログ: 適切なログレベル
      - テスト: 統合テスト

metadata:
  priority: medium
  version: 1.0
  tags:
    - rule-extraction
    - management
    - cursorrules
    - organization
</rule>

---