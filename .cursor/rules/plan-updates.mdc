---
description: プランファイルの外科的で集中的な更新のためのガイドライン
globs: *.md
---
# プラン更新ルール
# プランファイルの精密な更新を維持するためのガイドライン

<rule>
name: plan_updates
description: プラン更新の精密さを維持するためのルール
filters:
  - type: file_extension
    pattern: "\\.md$"
  - type: content
    pattern: "(Implementation Steps|Phase [0-9]|Current Status)"
actions:
  - type: suggest
    message: |
      プラン更新ガイドライン:

      1. 外科的集中:
         a) フェーズ分離:
            - 現在のアクティブフェーズのみを更新
            - 将来のフェーズは変更しない
            - 他のフェーズの元の構造を保持
            - 中断されたタスクを [INCOMPLETE] としてマーク

         b) タスクステータス:
            - 完了したタスクには [x] を使用
            - 保留中のタスクには [ ] を使用
            - 中断されたタスクには [INCOMPLETE] を使用
            - タスクの階層とインデントを維持

         c) タスクの追加:
            - 新しいタスクは現在のフェーズにのみ追加
            - 論理的な順序で新しいタスクを配置
            - 一貫性のあるフォーマットを維持
            - タスクの依存関係を保持

         d) タスクの更新:
            - 影響を受けるタスクのみを更新
            - 影響を受けないタスクは変更しない
            - 元のタスクの説明を維持
            - タスク ID と参照を保持

      2. 変更の文書化:
         a) ステータス更新:
            - updates.md で変更を文書化
            - 変更された特定のタスクを参照
            - 中断を説明
            - ブロッカーを記録

         b) 進捗追跡:
            - 完了したタスクのみを更新
            - タスク完了順序を維持
            - 部分的な完了を文書化
            - 影響を受けた依存関係を記録

      3. バージョン管理:
         a) コミット戦略:
            - 変更されたフェーズのみをコミット
            - 明確なコミットメッセージを使用
            - タスク ID を参照
            - 未完了のタスクを記録

         b) レビュープロセス:
            - 意図した変更のみを検証
            - フェーズの分離を確認
            - タスクステータスを検証
            - フォーマットを確認

      覚えておくこと:
      - 現在のフェーズにのみ集中
      - 中断されたタスクを文書化
      - プランの構造を維持
      - 将来のフェーズをそのまま保持

examples:
  - input: |
      "フェーズ 2 のタスクを更新する必要がある"
    output: |
      ```markdown
      ## フェーズ 2: 実装
      - [x] データベースモデルを作成
      - [x] API エンドポイントを実装
      - [INCOMPLETE] フロントエンドコンポーネントを作成
      - [ ] テストを書く
      - [ ] ドキュメントを更新
      ```

  - input: |
      "新しいタスクを現在のフェーズに追加する"
    output: |
      ```markdown
      ## フェーズ 1: セットアップ
      - [x] 依存関係をインストール
      - [x] 設定ファイルを作成
      - [ ] エラーハンドリングを追加  # 新しいタスク
      - [ ] 初期テストを実行
      ```